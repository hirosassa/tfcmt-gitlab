// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/notifier/gitlab/gitlab.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/notifier/gitlab/gitlab.go -destination=./pkg/notifier/gitlab/gen/gitlab.go -package gitlabmock
//

// Package gitlabmock is a generated GoMock package.
package gitlabmock

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AddMergeRequestLabels mocks base method.
func (m *MockAPI) AddMergeRequestLabels(labels *[]string, mergeRequest int) (gitlab.Labels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMergeRequestLabels", labels, mergeRequest)
	ret0, _ := ret[0].(gitlab.Labels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMergeRequestLabels indicates an expected call of AddMergeRequestLabels.
func (mr *MockAPIMockRecorder) AddMergeRequestLabels(labels, mergeRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMergeRequestLabels", reflect.TypeOf((*MockAPI)(nil).AddMergeRequestLabels), labels, mergeRequest)
}

// CreateMergeRequestNote mocks base method.
func (m *MockAPI) CreateMergeRequestNote(mergeRequest int, opt *gitlab.CreateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMergeRequestNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMergeRequestNote indicates an expected call of CreateMergeRequestNote.
func (mr *MockAPIMockRecorder) CreateMergeRequestNote(mergeRequest, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{mergeRequest, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMergeRequestNote", reflect.TypeOf((*MockAPI)(nil).CreateMergeRequestNote), varargs...)
}

// GetCommit mocks base method.
func (m *MockAPI) GetCommit(sha string, options ...gitlab.RequestOptionFunc) (*gitlab.Commit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{sha}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommit", varargs...)
	ret0, _ := ret[0].(*gitlab.Commit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockAPIMockRecorder) GetCommit(sha any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sha}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockAPI)(nil).GetCommit), varargs...)
}

// GetLabel mocks base method.
func (m *MockAPI) GetLabel(labelName string, options ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{labelName}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLabel", varargs...)
	ret0, _ := ret[0].(*gitlab.Label)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockAPIMockRecorder) GetLabel(labelName any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{labelName}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockAPI)(nil).GetLabel), varargs...)
}

// GetMergeRequest mocks base method.
func (m *MockAPI) GetMergeRequest(mergeRequest int, opt *gitlab.GetMergeRequestsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeRequest", varargs...)
	ret0, _ := ret[0].(*gitlab.MergeRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMergeRequest indicates an expected call of GetMergeRequest.
func (mr *MockAPIMockRecorder) GetMergeRequest(mergeRequest, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{mergeRequest, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequest", reflect.TypeOf((*MockAPI)(nil).GetMergeRequest), varargs...)
}

// ListMergeRequestLabels mocks base method.
func (m *MockAPI) ListMergeRequestLabels(mergeRequest int, opt *gitlab.GetMergeRequestsOptions, options ...gitlab.RequestOptionFunc) (gitlab.Labels, error) {
	m.ctrl.T.Helper()
	varargs := []any{mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeRequestLabels", varargs...)
	ret0, _ := ret[0].(gitlab.Labels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMergeRequestLabels indicates an expected call of ListMergeRequestLabels.
func (mr *MockAPIMockRecorder) ListMergeRequestLabels(mergeRequest, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{mergeRequest, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeRequestLabels", reflect.TypeOf((*MockAPI)(nil).ListMergeRequestLabels), varargs...)
}

// ListMergeRequestNotes mocks base method.
func (m *MockAPI) ListMergeRequestNotes(mergeRequest int, opt *gitlab.ListMergeRequestNotesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeRequestNotes", varargs...)
	ret0, _ := ret[0].([]*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMergeRequestNotes indicates an expected call of ListMergeRequestNotes.
func (mr *MockAPIMockRecorder) ListMergeRequestNotes(mergeRequest, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{mergeRequest, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeRequestNotes", reflect.TypeOf((*MockAPI)(nil).ListMergeRequestNotes), varargs...)
}

// ListMergeRequestsByCommit mocks base method.
func (m *MockAPI) ListMergeRequestsByCommit(sha string, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{sha}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeRequestsByCommit", varargs...)
	ret0, _ := ret[0].([]*gitlab.MergeRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMergeRequestsByCommit indicates an expected call of ListMergeRequestsByCommit.
func (mr *MockAPIMockRecorder) ListMergeRequestsByCommit(sha any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sha}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeRequestsByCommit", reflect.TypeOf((*MockAPI)(nil).ListMergeRequestsByCommit), varargs...)
}

// PostCommitComment mocks base method.
func (m *MockAPI) PostCommitComment(sha string, opt *gitlab.PostCommitCommentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.CommitComment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{sha, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostCommitComment", varargs...)
	ret0, _ := ret[0].(*gitlab.CommitComment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostCommitComment indicates an expected call of PostCommitComment.
func (mr *MockAPIMockRecorder) PostCommitComment(sha, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sha, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCommitComment", reflect.TypeOf((*MockAPI)(nil).PostCommitComment), varargs...)
}

// RemoveMergeRequestLabels mocks base method.
func (m *MockAPI) RemoveMergeRequestLabels(labels *[]string, mergeRequest int) (gitlab.Labels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMergeRequestLabels", labels, mergeRequest)
	ret0, _ := ret[0].(gitlab.Labels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMergeRequestLabels indicates an expected call of RemoveMergeRequestLabels.
func (mr *MockAPIMockRecorder) RemoveMergeRequestLabels(labels, mergeRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMergeRequestLabels", reflect.TypeOf((*MockAPI)(nil).RemoveMergeRequestLabels), labels, mergeRequest)
}

// UpdateLabel mocks base method.
func (m *MockAPI) UpdateLabel(opt *gitlab.UpdateLabelOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLabel", varargs...)
	ret0, _ := ret[0].(*gitlab.Label)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateLabel indicates an expected call of UpdateLabel.
func (mr *MockAPIMockRecorder) UpdateLabel(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabel", reflect.TypeOf((*MockAPI)(nil).UpdateLabel), varargs...)
}

// UpdateMergeRequest mocks base method.
func (m *MockAPI) UpdateMergeRequest(mergeRequest int, opt *gitlab.UpdateMergeRequestOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMergeRequest", varargs...)
	ret0, _ := ret[0].(*gitlab.MergeRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateMergeRequest indicates an expected call of UpdateMergeRequest.
func (mr *MockAPIMockRecorder) UpdateMergeRequest(mergeRequest, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{mergeRequest, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMergeRequest", reflect.TypeOf((*MockAPI)(nil).UpdateMergeRequest), varargs...)
}

// UpdateMergeRequestNote mocks base method.
func (m *MockAPI) UpdateMergeRequestNote(mergeRequest, note int, opt *gitlab.UpdateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{mergeRequest, note, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMergeRequestNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateMergeRequestNote indicates an expected call of UpdateMergeRequestNote.
func (mr *MockAPIMockRecorder) UpdateMergeRequestNote(mergeRequest, note, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{mergeRequest, note, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMergeRequestNote", reflect.TypeOf((*MockAPI)(nil).UpdateMergeRequestNote), varargs...)
}
